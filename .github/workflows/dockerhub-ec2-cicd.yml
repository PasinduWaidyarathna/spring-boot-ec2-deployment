name: Spring Boot CICD pipeline with DockerHub and EC2
run-name: Spring Boot CICD pipeline with DockerHub and EC2
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  SSH_USER: ${{secrets.SSH_USER}}
  SSH_HOST: ${{secrets.SSH_HOST}}
  SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build and Test
        run: mvn clean test

  docker:
    needs: test
    name: Build and Push Docker Image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}
      - name: Build & Push the Docker Image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{env.DOCKER_USERNAME}}/student-management-backend:latest

  ec2:
    needs: docker
    name: Deploy Docker Container to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 using appleboy/ssh-action
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
               sudo apt-get update &&
               sudo apt-get install -y docker.io &&
               sudo systemctl start docker &&
               sudo systemctl enable docker
            fi
            
            # Login to Docker Hub
            echo ${{ secrets.DOCKER_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # Stop, remove, pull and run the container
            sudo docker stop student-management-backend || true
            sudo docker rm student-management-backend || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/student-management-backend:latest
            sudo docker run -d --name student-management-backend -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/student-management-backend:latest